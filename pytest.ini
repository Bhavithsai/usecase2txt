[pytest]
pythonpath = . scripts/ lib/
testpaths = scripts/tests pytests/
addopts = --cov=scripts --cov=lib/ --cov-report=term-missing --cov-report=xml:coverage/coverage.xml



#!/bin/bash
set -e
pip install -r requirements.txt
npm ci 
npm audit --audit-level=critical
npm run lint
npm run test #This will run test
pytest  #This will run pytest
common_sonar_analysis_params="-Dsonar.projectKey=OPCFN:aws-reports -Dsonar.projectName=aws-reports -Dsonar.sources=. -Dsonar.tests=test,lib/ -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.xml -Dsonar.exclusions=coverage/**,dist/**,img/**,cdk.out,node_modules/**,test/**,**/*.java -Dsonar.token=$SONAR_TOKEN -Dsonar.host.url=https://oppci.eficode.com/sonarqube -Dsonar.projectVersion=$CODEBUILD_RESOLVED_SOURCE_VERSION -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=400"
if [[ "$BRANCH_NAME" == "master" ]]; then
    sonar_command="sonar-scanner $common_sonar_analysis_params -Dsonar.branch.name=$BRANCH_NAME"
else
    sonar_command="sonar-scanner $common_sonar_analysis_params -Dsonar.pullrequest.key=$BRANCH_NAME -Dsonar.pullrequest.base=master -Dsonar.pullrequest.branch=$BRANCH_NAME"
fi
echo "Executing: $sonar_command"
eval "$sonar_command"

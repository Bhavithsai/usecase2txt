======================================================= 1 error in 1.01s ======================================================== 
PS C:\Users\B730369\aws-reports\lib\lambda\test> python -m pytest patching_report_test.py
====================================================== test session starts ======================================================
platform win32 -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0
rootdir: C:\Users\B730369\aws-reports
configfile: pytest.ini
collected 0 items / 1 error

============================================================ ERRORS ============================================================= 
___________________________________ ERROR collecting lib/lambda/test/patching_report_test.py ____________________________________ 
ImportError while importing test module 'C:\Users\B730369\aws-reports\lib\lambda\test\patching_report_test.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Python310\lib\importlib\__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
patching_report_test.py:10: in <module>
    from lambda_handler import process_reports
E   ModuleNotFoundError: No module named 'lambda_handler'
==================================================== short test summary info ==================================================== 
ERROR patching_report_test.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
======================================================= 1 error in 0.97s ======================================================== 
PS C:\Users\B730369\aws-reports\lib\lambda\test> python -m pytest patching_report_test.py
====================================================== test session starts ======================================================
platform win32 -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0
rootdir: C:\Users\B730369\aws-reports
configfile: pytest.ini
collected 1 item

patching_report_test.py F                                                                                                  [100%]

=========================================================== FAILURES ============================================================ 
_____________________________________________________ test_process_reports ______________________________________________________ 

mock_s3_client = <MagicMock name='client' id='1723365539072'>

    def test_process_reports(mock_s3_client):
        # Mock the S3 client and responses
        mock_s3 = mock_s3_client.return_value
        mock_s3.get_object = mock.MagicMock(side_effect=mock_get_object)

        # Test process_reports function
        input_bucket = "op-cloudcustodian-reports"
        output_bucket = "op-patching-reports"
        ec2_report_key = "csv/ec2-all/ec2-all.csv"
        ami_report_key = "csv/all-amis/all-amis.csv"
        account_report_key = "csv/aws-account-data/latest/aws-account-data-report.csv"

>       result = process_reports(mock_s3, input_bucket, output_bucket, ec2_report_key, ami_report_key, account_report_key)        

patching_report_test.py:29:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s3_client = <MagicMock name='client()' id='1723365538976'>, input_bucket = 'op-cloudcustodian-reports'
output_bucket = 'op-patching-reports', ec2_report_key = 'csv/ec2-all/ec2-all.csv', ami_report_key = 'csv/all-amis/all-amis.csv'   
account_report_key = 'csv/aws-account-data/latest/aws-account-data-report.csv'

    def process_reports(s3_client, input_bucket, output_bucket, ec2_report_key, ami_report_key, account_report_key):
        # Load EC2 report
        ec2_response = s3_client.get_object(Bucket=input_bucket, Key=ec2_report_key)
>       ec2_report = pd.read_csv(StringIO(ec2_response['Body'].read().decode('utf-8')))
E       AttributeError: 'str' object has no attribute 'decode'. Did you mean: 'encode'?

..\op_patching_report\main.py:10: AttributeError
==================================================== short test summary info ==================================================== 
FAILED patching_report_test.py::test_process_reports - AttributeError: 'str' object has no attribute 'decode'. Did you mean: 'encode'?




PS C:\Users\B730369\aws-reports> python -m pytest
==================================================== test session starts ====================================================
platform win32 -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0
rootdir: C:\Users\B730369\aws-reports
configfile: pytest.ini
testpaths: scripts/tests, pytests/
plugins: cov-5.0.0
collected 7 items

scripts\tests\test_yaml.py ..                                                                                          [ 28%]
pytests\patching_report_test.py ..F..                                                                                  [100%]

========================================================= FAILURES ========================================================== 
____________________________________________ test_process_reports_missing_column ____________________________________________ 

mock_s3_client = <MagicMock name='client' id='1625780973824'>

    def test_process_reports_missing_column(mock_s3_client):
        """Test the process_reports function for missing columns scenario."""
        mock_s3 = mock_s3_client.return_value
        mock_s3.get_object.side_effect = mock_get_object_success

        # Modify the EC2 report to remove the 'LaunchTime' column
        ec2_data = "Account,InstanceId,ImageId\naccount1,i-1234567890,ami-12345"
        mock_s3.get_object.return_value = {'Body': BytesIO(ec2_data.encode('utf-8'))}

        input_bucket = "op-cloudcustodian-reports"
        output_bucket = "op-patching-reports"
        output_key = "csv/instance-patching-report.csv"
        ec2_report_key = "csv/ec2-all/ec2-all.csv"
        ami_report_key = "csv/all-amis/all-amis.csv"
        account_bucket = "op-general-reports"
        account_report_key = "csv/aws-account-data/latest/aws-account-data-report.csv"

        # Call the function
        result = process_reports(mock_s3, input_bucket, output_bucket, output_key, ec2_report_key, ami_report_key, account_bucket, account_report_key)

        # Verify that missing 'LaunchTime' column is handled gracefully (filled with N/A)
        assert 'LaunchTime' in result
>       assert 'N/A' in result
E       AssertionError: assert 'N/A' in 'AccountName,AccountID,InstanceId,LaunchTime,ImageId,CreationDate,Tribe,Owner,InvoicingContact,TechnicalContact\r\naccount1,123456789012,i-1234567890,2021-01-01,ami-12345,2021-01-01,Tribe1,owner1,contact1,tech1\r\n'

pytests\patching_report_test.py:110: AssertionError

---------- coverage: platform win32, python 3.10.12-final-0 ----------
Coverage XML written to file coverage/coverage.xml

================================================== short test summary info ================================================== 
FAILED pytests/patching_report_test.py::test_process_reports_missing_column - AssertionError: assert 'N/A' in 'AccountName,AccountID,InstanceId,LaunchTime,ImageId,CreationDate,Tribe,Owner,InvoicingCo...



PS C:\Users\B730369\aws-reports> python -m pytest
==================================================== test session starts ====================================================
platform win32 -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0
rootdir: C:\Users\B730369\aws-reports
configfile: pytest.ini
testpaths: scripts/tests, pytests/
plugins: cov-5.0.0
collected 7 items

scripts\tests\test_yaml.py ..                                                                                          [ 28%] 
pytests\patching_report_test.py ..F..                                                                                  [100%]

========================================================= FAILURES ========================================================== 
____________________________________________ test_process_reports_missing_column ____________________________________________ 

mock_s3_client = <MagicMock name='client' id='1786870034640'>

    def test_process_reports_missing_column(mock_s3_client):
        """Test the process_reports function for missing columns scenario."""
        mock_s3 = mock_s3_client.return_value
        mock_s3.get_object.side_effect = mock_get_object_success

        # Modify the EC2 report to remove the 'LaunchTime' column
        ec2_data = "Account,InstanceId,ImageId\naccount1,i-1234567890,ami-12345"
        mock_s3.get_object.return_value = {'Body': BytesIO(ec2_data.encode('utf-8'))}

        input_bucket = "op-cloudcustodian-reports"
        output_bucket = "op-patching-reports"
        output_key = "csv/instance-patching-report.csv"
        ec2_report_key = "csv/ec2-all/ec2-all.csv"
        ami_report_key = "csv/all-amis/all-amis.csv"
        account_bucket = "op-general-reports"
        account_report_key = "csv/aws-account-data/latest/aws-account-data-report.csv"

        # Call the function
        result = process_reports(mock_s3, input_bucket, output_bucket, output_key, ec2_report_key, ami_report_key, account_bucket, account_report_key)

        # Verify that missing 'LaunchTime' column is handled gracefully (filled with N/A)
        assert 'LaunchTime' in result
>       assert 'N/A' in result.splitlines()[1]
E       AssertionError: assert 'N/A' in 'account1,123456789012,i-1234567890,2021-01-01,ami-12345,2021-01-01,Tribe1,owner1,contact1,tech1'

pytests\patching_report_test.py:110: AssertionError

---------- coverage: platform win32, python 3.10.12-final-0 ----------
Coverage XML written to file coverage/coverage.xml

================================================== short test summary info ================================================== 
FAILED pytests/patching_report_test.py::test_process_reports_missing_column - AssertionError: assert 'N/A' in 'account1,123456789012,i-1234567890,2021-01-01,ami-12345,2021-01-01,Tribe1,owner1,contact...

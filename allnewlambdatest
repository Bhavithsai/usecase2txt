import pytest
from unittest import mock
import boto3
import pandas as pd
from io import StringIO
from lambda_function import process_reports

@pytest.fixture
def mock_s3_client():
    with mock.patch('boto3.client') as mock_client:
        yield mock_client

def test_process_reports(mock_s3_client):
    # Mock the S3 client and responses
    mock_s3 = mock_s3_client.return_value
    mock_s3.get_object = mock.MagicMock(side_effect=mock_get_object)

    # Test process_reports function
    input_bucket = "op-cloudcustodian-reports"
    output_bucket = "op-patching-reports"
    ec2_report_key = "csv/ec2-all/ec2-all.csv"
    ami_report_key = "csv/all-amis/all-amis.csv"
    account_report_key = "csv/aws-account-data/latest/aws-account-data-report.csv"
    
    result = process_reports(mock_s3, input_bucket, output_bucket, ec2_report_key, ami_report_key, account_report_key)
    
    # Check the result CSV content
    assert result is not None
    assert 'AccountName' in result
    assert 'InstanceId' in result

def mock_get_object(Bucket, Key):
    if Key == 'csv/ec2-all/ec2-all.csv':
        ec2_data = "Account,InstanceId,ImageId,LaunchTime\naccount1,i-1234567890,ami-12345,2021-01-01"
        return {'Body': StringIO(ec2_data)}
    elif Key == 'csv/all-amis/all-amis.csv':
        ami_data = "ImageId,CreationDate,Name\nami-12345,2021-01-01,MyAMI"
        return {'Body': StringIO(ami_data)}
    elif Key == 'csv/aws-account-data/latest/aws-account-data-report.csv':
        account_data = "AccountID,AccountName,Tribe,InvoicingContact,Owner,TechnicalContact\n123456789012,account1,Tribe1,contact1,owner1,tech1"
        return {'Body': StringIO(account_data)}

